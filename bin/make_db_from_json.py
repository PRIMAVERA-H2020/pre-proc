#!/usr/bin/env python
"""
make_db_from_json.py

Use Django to populate the database from the JSON file generated by the DMT.
"""
import argparse
import json
import logging.config
import sys

import django
django.setup()

import pre_proc_app.models
from pre_proc_app.models import (Institution, ClimateModel, Experiment,
                                 DataRequest)


__version__ = '0.1.0b1'

DEFAULT_LOG_LEVEL = logging.WARNING
DEFAULT_LOG_FORMAT = '%(levelname)s: %(message)s'

logger = logging.getLogger(__name__)


def _dict_to_object(dict_):
    """
    Convert a dictionary to an object.

    This was designed to be passed to the object_hook argument in json.load()
    but has been modified to be called on its own because in this application
    the order that objects are created in is important because of the
    foreign key relationships.
    """
    klass = getattr(pre_proc_app.models, dict_['__class__'])
    if dict_['__class__'] in ('ClimateModel', 'Experiment', 'Institution'):
        inst = klass.objects.get_or_create(
            name=dict_['__kwargs__']['short_name']
        )
    elif dict_['__class__'] == 'DataRequest':
        institution_id = Institution.objects.get(
            name=dict_['__kwargs__']['institution_id__name'])
        source_id = ClimateModel.objects.get(
            name=dict_['__kwargs__']['source_id__name'])
        experiment_id = Experiment.objects.get(
            name=dict_['__kwargs__']['experiment_id__name'])
        inst = DataRequest.objects.get_or_create(
            institution_id=institution_id,
            source_id=source_id,
            experiment_id=experiment_id,
            table_id=dict_['__kwargs__']['table_id'],
            cmor_name=dict_['__kwargs__']['cmor_name'],
            variant_label=dict_['__kwargs__']['variant_label']
        )
    else:
        msg = ('Cannot load from JSON files class {}'.
               format(dict_['__class__']))
        raise NotImplementedError(msg)
    return inst


def parse_args():
    """
    Parse command-line arguments
    """
    parser = argparse.ArgumentParser(description='Pre-process PRIMAVERA data.')
    parser.add_argument('json_file', help='the full path to the JSON file to '
                                          'load into the database', type=str)
    parser.add_argument('-l', '--log-level', help='set logging level to one '
                                                  'of debug, info, warn (the '
                                                  'default), or error')
    parser.add_argument('--version', action='version',
                        version='%(prog)s {}'.format(__version__))
    args = parser.parse_args()

    return args


def main(args):
    """
    Main entry point
    """
    with open(args.json_file) as fh:
        json_dict = json.load(fh,)

    for object_type in ['institution_id', 'source_id', 'experiment_id',
                        'data_requests']:
        for object_instance in json_dict[object_type]:
            _dict_to_object(object_instance)


if __name__ == "__main__":
    cmd_args = parse_args()

    # determine the log level
    if cmd_args.log_level:
        try:
            log_level = getattr(logging, cmd_args.log_level.upper())
        except AttributeError:
            logger.setLevel(logging.WARNING)
            logger.error('log-level must be one of: debug, info, warn or error')
            sys.exit(1)
    else:
        log_level = DEFAULT_LOG_LEVEL

    # configure the logger
    logging.config.dictConfig({
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'standard': {
                'format': DEFAULT_LOG_FORMAT,
            },
        },
        'handlers': {
            'default': {
                'level': log_level,
                'class': 'logging.StreamHandler',
                'formatter': 'standard'
            },
        },
        'loggers': {
            '': {
                'handlers': ['default'],
                'level': log_level,
                'propagate': True
            }
        }
    })

    # run the code
    main(cmd_args)
